// #include "stm32f0xx.h"

// // Define game modes
// typedef enum {
//     EASY,
//     MEDIUM,
//     HARD
// } GameMode;

// GameMode current_mode = EASY;
// const char* mode_strings[] = {"Mode: Easy", "Mode: Medium", "Mode: Hard"};

// // Function prototypes
// void internal_clock(void);
// void enable_ports(void);
// void init_spi1(void);
// void spi1_init_oled(void);
// void spi_cmd(unsigned int data);
// void spi_data(unsigned int data);
// void display_game_mode(const char *mode);
// void setup_button_interrupt(void);
// void nano_wait(unsigned int n);
// void cycle_game_mode(void);

// // Initialize GPIO for PA0 with external interrupt
// void setup_button_interrupt(void) {
//     // Enable GPIOA clock
//     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

//     // Configure PA0 as input for button
//     GPIOA->MODER &= ~GPIO_MODER_MODER0; // Set PA0 to input mode
//     GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0; // No pull-up, no pull-down

//     // Configure the EXTI (External Interrupt) for PA0
//     SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;  // Map EXTI0 to PA0
//     EXTI->IMR |= EXTI_IMR_IM0;                   // Unmask interrupt on EXTI0
//     EXTI->RTSR |= EXTI_RTSR_TR0;                 // Trigger on rising edge

//     // Enable EXTI0 interrupt in NVIC
//     NVIC_SetPriority(EXTI0_1_IRQn, 1);           // Set priority
//     NVIC_EnableIRQ(EXTI0_1_IRQn);                // Enable EXTI0_1 interrupt
// }

// // EXTI0 interrupt handler for button press
// void EXTI0_1_IRQHandler(void) {
//     if (EXTI->PR & EXTI_PR_PR0) { // Check if EXTI0 triggered
//         EXTI->PR |= EXTI_PR_PR0;  // Clear interrupt flag
//         cycle_game_mode();        // Cycle to the next game mode
//     }
// }

// // Function to cycle through game modes and display the current mode
// void cycle_game_mode() {
//     current_mode = (current_mode + 1) % 3;  // Cycle: EASY -> MEDIUM -> HARD -> EASY
//     display_game_mode(mode_strings[current_mode]);  // Update OLED display
// }

// // Function to display the game mode on OLED
// void display_game_mode(const char *mode) {
//     spi_cmd(0x02);  // Set cursor to the beginning of the first line
//     while (*mode) {
//         spi_data(*mode++);  // Send each character of mode string to display
//     }
// }

// // Function to initialize internal clock (if required)
// void internal_clock(void) {
//     // Placeholder function for internal clock setup
// }

// // Initialize SPI1 for OLED
// void init_spi1(void) {
//     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
//     RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

//     GPIOA->MODER &= ~(0xC000FC00);             
//     GPIOA->MODER |= (0x8000A800);              

//     GPIOA->AFR[0] &= ~(0xF0F00000);            
//     GPIOA->AFR[1] &= ~(0xF0000000);            

//     SPI1->CR1 &= ~SPI_CR1_SPE;
//     SPI1->CR1 |= SPI_CR1_BR | SPI_CR1_MSTR;
//     SPI1->CR2 |= SPI_CR2_DS_3 | SPI_CR2_DS_0;  
//     SPI1->CR2 &= ~(SPI_CR2_DS_1 | SPI_CR2_DS_2); 
//     SPI1->CR2 |= SPI_CR2_TXDMAEN | SPI_CR2_SSOE | SPI_CR2_NSSP;
//     SPI1->CR1 |= SPI_CR1_SPE;  // Enable SPI1
// }

// // Initialize the OLED display using SPI commands
// void spi1_init_oled(void) {
//     nano_wait(1000000);  // wait 1 ms
//     spi_cmd(0x38); // Function set
//     spi_cmd(0x08); // Display off
//     spi_cmd(0x01); // Clear display
//     nano_wait(2000000); // wait 2 ms
//     spi_cmd(0x06); // Entry mode set
//     spi_cmd(0x02); // Cursor to home position
//     spi_cmd(0x0C); // Display on
// }

// // Send a command to the OLED
// void spi_cmd(unsigned int data) {
//     while (!(SPI1->SR & SPI_SR_TXE)) { }  // Wait until TX buffer is empty
//     SPI1->DR = data;
// }

// // Send data to the OLED
// void spi_data(unsigned int data) {
//     spi_cmd(data | 0x200);  // Add 0x200 to mark data instead of command
// }

// // Short delay function
// void nano_wait(unsigned int n) {
//     asm("mov r0,%0\n repeat: sub r0,#83\n bgt repeat\n" : : "r"(n) : "r0", "cc");
// }

// // Main function
// int main(void) {
//     internal_clock();        // Initialize system clock
//     enable_ports();          // Enable GPIO (placeholder function in your setup)
//     setup_button_interrupt();// Initialize button for mode selection
//     init_spi1();             // Initialize SPI1 for OLED communication
//     spi1_init_oled();        // Initialize OLED display settings

//     // Display the initial game mode on OLED
//     display_game_mode(mode_strings[current_mode]);

//     // Main loop (empty as the button interrupt will handle mode change)
//     while (1) {
//         // Do nothing; wait for button interrupts
//     }
// }
